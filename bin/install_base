#!/bin/bash

if [ "$(id -u)" -eq 0 ]; then
    echo "ERROR: This script should not be run as root. Please run as a regular user."
    exit 1
fi

# Variables
PYTHON_SOURCE="https://www.python.org/ftp/python/3.13.2/Python-3.13.2.tgz"
NERD_FONTS_SOURCE="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/FiraCode.tar.xz"
LAZYGIT_SOURCE="https://github.com/jesseduffield/lazygit/releases/download/v0.51.1/lazygit_0.51.1_Linux_x86_64.tar.gz"
YAZI_SOURCE="https://github.com/sxyazi/yazi/releases/latest/download/yazi-x86_64-unknown-linux-musl.zip"
NEOVIM_SOURCE="https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-linux-x86_64.tar.gz"
STARSHIP_SOURCE="https://starship.rs/install.sh"
BROWSH_SOURCE="https://github.com/browsh-org/browsh/releases/download/v1.8.0/browsh_1.8.0_linux_amd64.rpm"
TMUX_SOURCE="https://github.com/tmux/tmux/releases/download/3.5a/tmux-3.5a.tar.gz"
GOLANG_SOURCE="https://go.dev/dl/go1.24.4.linux-amd64.tar.gz"
YQ_SOURCE="https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64.tar.gz"
GH_RPM="https://github.com/cli/cli/releases/download/v2.74.1/gh_2.74.1_linux_amd64.rpm"
PORTS=(80 443 2400 4200 8000 8001 8080)

cd ~

echo "Installing/Updating system packages..."
sudo dnf upgrade -y --refresh
sudo dnf update -y
sudo dnf install -y epel-release 
sudo dnf config-manager --set-enabled crb

sudo dnf update -y
sudo dnf upgrade -y --refresh
sudo dnf install -y git curl wget gcc make cmake autoconf automake libtool \
    bzip2-devel openssl-devel ncurses-devel readline-devel zip unzip\
    zlib-devel libffi-devel sqlite-devel xz-devel postgresql-devel \
    libdb-devel gdbm-devel tcl-devel tk-devel libuuid-devel \
    bat btop fish fzf ripgrep fd-find jq xclip podman podman-compose \
    libevent-devel rclone cifs-utils

echo "Enabling Node.js 22..."
sudo dnf module enable -y nodejs:22
sudo dnf install -y nodejs npm

echo "Installing GitHub CLI"
sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
sudo dnf install gh -y

# Check if firewalld is running
if ! sudo systemctl is-active --quiet firewalld; then
    echo "Firewalld is not running. Starting firewalld..."
    sudo systemctl start firewalld
    sudo systemctl enable firewalld
fi

# Add each port to firewalld
for port in "${PORTS[@]}"; do
    echo "Opening port $port/tcp..."
    sudo firewall-cmd --permanent --add-port="$port/tcp"
done

# Reload firewalld to apply changes
sudo firewall-cmd --reload

# Verify the ports are open
echo "Checking open ports..."
sudo firewall-cmd --list-ports
echo "Ports opened successfully!"

if command -v zoxide >/dev/null 2>&1; then
    echo "zoxide exists, skipping"
else
    echo "Installing zoxide"
    curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
fi

if command -v yq >/dev/null 2>&1; then
    echo "yq exists, skipping"
else
    echo "Installing yq"
    wget "$YQ_SOURCE" -O yq.tar.gz
    mkdir yq
    cd yq
    tar -xzf ../yq.tar.gz
    mv $(rg --files -g "*yq_linux*" | head -n 1) yq
    sudo install -t /usr/local/bin yq
    rm -rf yq.tar.gz yq
fi

if command -v lazygit >/dev/null 2>&1; then
    echo "lazygit exists, skipping"
else
    echo "Installing lazygit..."
    wget "$LAZYGIT_SOURCE" -O lazygit.tar.gz
    tar -xzf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm lazygit lazygit.tar.gz
fi

if command -v tmux >/dev/null 2>&1; then
    echo "tmux exists, skipping"
else
    echo "Installing tmux and its dependencies..."
    wget "$TMUX_SOURCE" -O tmux.tar.gz
    tar -xzf tmux.tar.gz
    cd tmux-* || exit

    sudo dnf install -y bison
    ./configure && make -j "$(nproc)"
    sudo make install
    cd ..
    rm -rf tmux-* tmux.tar.gz
    sudo dnf remove -y bison
fi

if command -v yazi >/dev/null 2>&1; then
    echo "yazi exists, skipping"
else
    echo "Installing yazi..."
    wget "$YAZI_SOURCE" -O yazi.zip
    unzip yazi.zip -d yazi-bin
    rg --files -g yazi ./yazi-bin | sudo xargs install -t /usr/local/bin
    rm -rf yazi.zip yazi-bin
fi

if command -v python3.13 >/dev/null 2>&1; then
    echo "python3.13 exists, skipping"
else
    echo "Building Python from source..."
    wget "$PYTHON_SOURCE" -O Python.tar.gz
    tar -xzf Python.tar.gz
    cd Python-*/ || exit

    ./configure --enable-optimizations --with-ensurpip

    make -j "$(nproc)"
    sudo make altinstall
    cd ..
    sudo rm -rf Python-* Python.tar.gz
fi

echo "Installing Python tools..."
python3.13 -m pip install --user pipx
python3.13 -m pipx ensurepath
python3.13 -m pipx install poetry
python3.13 -m pipx install posting
python3.13 -m pipx install tldr
python3.13 -m pipx install ipython

echo "Installing Nerd Fonts..."
mkdir -p ~/.local/share/fonts
wget "$NERD_FONTS_SOURCE" -O nerd-fonts.tar.xz
tar -xf nerd-fonts.tar.xz -C ~/.local/share/fonts
rm nerd-fonts.tar.xz
fc-cache -fv

if command -v nvim >/dev/null 2>&1; then
    echo "nvim exists, skipping"
else
    echo "Installing Neovim..."
    wget "$NEOVIM_SOURCE" -O nvim.tar.gz
    sudo tar -C /usr/local -xzf nvim.tar.gz --strip-components=1
    rm nvim.tar.gz
fi

if command -v starship >/dev/null 2>&1; then
    echo "starship exists, skipping"
else
    echo "Installing Starship..."
fi
curl -sS "$STARSHIP_SOURCE" | sudo sh -s -- --yes

if command -v /usr/local/go/bin/go >/dev/null 2>&1; then
    echo "go exists, skipping"
else
    echo "Install Golang"
    wget "$GOLANG_SOURCE" -O golang.tar.gz
    sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf golang.tar.gz
    rm golang.tar.gz
fi

echo "Setting up fish shell..."
sudo chsh -s /usr/bin/fish "$USER"
sudo chsh -s /usr/bin/fish root

echo "Creating podman symlinks for docker compatibility..."
sudo ln -sf /usr/bin/podman /usr/local/bin/docker
sudo ln -sf /usr/bin/podman-compose /usr/local/bin/docker-compose

if command -v starship >/dev/null 2>&1; then
    echo "fish-lsp exists, skipping"
else
    echo "node global packages"
    sudo npm i -g fish-lsp
fi

echo "installing cbonsai"
git clone https://gitlab.com/jallbrit/cbonsai
cd cbonsai
make install PREFIX=~/.local

echo "Cleaning devel packages"
sudo dnf remove -y bzip2-devel openssl-devel ncurses-devel readline-devel zlib-devel libffi-devel sqlite-devel xz-devel postgresql-devel libdb-devel gdbm-devel tcl-devel tk-devel libuuid-devel libevent-devel
sudo dnf autoremove -y

echo "Installation completed successfully!"
