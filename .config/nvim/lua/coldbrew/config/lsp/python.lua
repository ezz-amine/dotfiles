local settings = {
  disableOrganizeImports = true,
  analysis = {
    autoSearchPaths = true,
    autoImportCompletions = true,
    diagnosticMode = "workspace",
    typeCheckingMode = "recommended",
    diagnosticSeverityOverrides = {
      -- strictListInference = false,
      -- strictSetInference = false,
      -- strictDictionaryInference = false,
      -- analyzeUnannotatedFunctions = false,
      -- strictParameterNoneValue = false,
      -- enableExperimentalFeatures = false,
      -- deprecateTypingAliases = false,
      -- disableBytesTypePromotions = true,
      -- strictGenericNarrowing = false,
      -- enableTypeIgnoreComments = true,
      -- enableReachabilityAnalysis = false,
      -- failOnWarnings = false,
      -- reportGeneralTypeIssues = "none",
      -- reportPropertyTypeMismatch = "none",
      -- reportFunctionMemberAccess = "error",
      reportMissingImports = "error",
      reportMissingModuleSource = "none",
      reportInvalidTypeForm = "none",
      reportMissingTypeStubs = "none",
      reportImportCycles = "warning",
      reportUnusedImport = "hint",
      reportUnusedClass = "hint",
      reportUnusedFunction = "hint",
      reportUnusedVariable = "hint",
      reportDuplicateImport = "warning",
      reportWildcardImportFromLibrary = "hint",
      reportAbstractUsage = "none",
      reportArgumentType = "none",
      -- reportAssertTypeFailure = "none",
      reportAssignmentType = "hint",
      reportAttributeAccessIssue = "hint",
      reportCallIssue = "hint",
      reportInconsistentOverload = "warning",
      -- reportIndexIssue = "none",
      -- reportInvalidTypeArguments = "none",
      -- reportNoOverloadImplementation = "none",
      -- reportOperatorIssue = "none",
      reportOptionalSubscript = "hint",
      reportOptionalMemberAccess = "hint",
      reportOptionalCall = "hint",
      reportOptionalIterable = "hint",
      reportOptionalContextManager = "hint",
      reportOptionalOperand = "hint",
      reportRedeclaration = "warning",
      -- reportReturnType = "none",
      -- reportTypedDictNotRequiredAccess = "none",
      -- reportUntypedFunctionDecorator = "none",
      -- reportUntypedClassDecorator = "none",
      -- reportUntypedBaseClass = "none",
      -- reportUntypedNamedTuple = "none",
      reportPrivateUsage = "warning",
      -- reportTypeCommentUsage = "hint",
      reportPrivateImportUsage = "none",
      reportConstantRedefinition = "error",
      reportDeprecated = "warning",
      reportIncompatibleMethodOverride = "hint",
      reportIncompatibleVariableOverride = "hint",
      -- reportInconsistentConstructor = "none",
      reportOverlappingOverload = "hint",
      reportPossiblyUnboundVariable = "hint",
      reportMissingSuperCall = "warning",
      -- reportUninitializedInstanceVariable = "none",
      reportInvalidStringEscapeSequence = "warning",
      reportUnknownParameterType = "none",
      reportUnknownArgumentType = "none",
      reportUnknownLambdaType = "none",
      reportUnknownVariableType = "none",
      reportUnknownMemberType = "none",
      reportMissingParameterType = "none",
      reportMissingTypeArgument = "none",
      -- reportInvalidTypeVarUse = "none",
      -- reportCallInDefaultInitializer = "none",
      reportUnnecessaryIsInstance = "warning",
      reportUnnecessaryCast = "warning",
      reportUnnecessaryComparison = "warning",
      reportUnnecessaryContains = "warning",
      -- reportAssertAlwaysTrue = "none",
      -- reportSelfClsParameterName = "none",
      -- reportImplicitStringConcatenation = "none",
      -- reportUndefinedVariable = "none",
      -- reportUnhashable = "none",
      -- reportUnboundVariable = "none",
      -- reportInvalidStubStatement = "none",
      -- reportIncompleteStub = "none",
      -- reportUnsupportedDunderAll = "none",
      reportUnusedCallResult = "hint",
      -- reportUnusedCoroutine = "none",
      -- reportUnusedExcept = "hint",
      -- reportUnusedExpression = "none",
      -- reportUnnecessaryTypeIgnoreComment = "none",
      -- reportMatchNotExhaustive = "none",
      -- reportShadowedImports = "none",
      reportImplicitOverride = "hint",
      reportUnreachable = "hint",
      reportAny = "none",
      reportExplicitAny = "none",
      -- reportIgnoreCommentWithoutRule = "none",
      -- reportInvalidCast = "none",
      reportImplicitRelativeImport = "none",
      reportPrivateLocalImportUsage = "none",
      -- reportUnsafeMultipleInheritance = "none",
      -- reportUnusedParameter = "hint",
      -- reportImplicitAbstractClass = "none",
      reportUnannotatedClassAttribute = "none",
      -- reportIncompatibleUnannotatedOverride = "none",
      -- reportInvalidAbstractMethod = "none",
    },
  },
}

return function(opts)
  local lspconfig = vim.tbl_get(opts, "lspconfig") or nil
  local cmp = vim.tbl_get(opts, "cmp") or nil
  local capabilities = vim.tbl_get(opts, "capabilities") or nil

  if lspconfig ~= nil then
    lspconfig.basedpyright.setup({
      capabilities = capabilities,
      filetypes = { "python" },
      root_markers = {
        "pyproject.toml",
        "setup.py",
        "setup.cfg",
        "requirements.txt",
        "Pipfile",
        "pyrightconfig.json",
        ".git",
      },
      settings = {
        basedpyright = settings,
      },
      root_dir = lspconfig.util.root_pattern(".git", "pyproject.toml", "requirements.txt"),
    })
  end

  if cmp ~= nil then
    cmp.setup.filetype("python", {
      sources = require("cmp").config.sources({
        { name = "nvim_lsp" },
        { name = "parrot" },
        { name = "luasnip" },
      }, {
        { name = "buffer" },
      }),
    })
  end
end
